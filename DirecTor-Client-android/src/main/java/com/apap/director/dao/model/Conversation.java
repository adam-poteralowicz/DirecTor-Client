package com.apap.director.dao.model;

import org.greenrobot.greendao.DaoException;
import org.greenrobot.greendao.annotation.*;

import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.

/**
 * Entity mapped to table "CONVERSATION".
 */
@Entity(active = true)
public class Conversation {

    @Id
    private Long id;
    private String sender;
    private String recipient;
    private String contactId;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient ConversationDao myDao;

    @ToOne(joinProperty = "contactId")
    private Contact contact;

    @Generated
    private transient String contact__resolvedKey;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "conversationId")
    })
    private List<Message> messages;

    @Generated
    public Conversation() {
    }

    public Conversation(Long id) {
        this.id = id;
    }

    @Generated
    public Conversation(Long id, String sender, String recipient, String contactId) {
        this.id = id;
        this.sender = sender;
        this.recipient = recipient;
        this.contactId = contactId;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getConversationDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getSender() {
        return sender;
    }

    public void setSender(String sender) {
        this.sender = sender;
    }

    public String getRecipient() {
        return recipient;
    }

    public void setRecipient(String recipient) {
        this.recipient = recipient;
    }

    public String getContactId() {
        return contactId;
    }

    public void setContactId(String contactId) {
        this.contactId = contactId;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Contact getContact() {
        String __key = this.contactId;
        if (contact__resolvedKey == null || contact__resolvedKey != __key) {
            __throwIfDetached();
            ContactDao targetDao = daoSession.getContactDao();
            Contact contactNew = targetDao.load(__key);
            synchronized (this) {
                contact = contactNew;
            	contact__resolvedKey = __key;
            }
        }
        return contact;
    }

    @Generated
    public void setContact(Contact contact) {
        synchronized (this) {
            this.contact = contact;
            contactId = contact == null ? null : contact.getName();
            contact__resolvedKey = contactId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<Message> getMessages() {
        if (messages == null) {
            __throwIfDetached();
            MessageDao targetDao = daoSession.getMessageDao();
            List<Message> messagesNew = targetDao._queryConversation_Messages(id);
            synchronized (this) {
                if(messages == null) {
                    messages = messagesNew;
                }
            }
        }
        return messages;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetMessages() {
        messages = null;
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

    @Override
    public String toString() {
        return recipient;
    }

}

package com.apap.director.dao.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;
import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MESSAGE".
*/
public class MessageDao extends AbstractDao<Message, Void> {

    public static final String TABLENAME = "MESSAGE";

    /**
     * Properties of entity Message.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Sender = new Property(0, String.class, "sender", false, "SENDER");
        public final static Property Recipient = new Property(1, String.class, "recipient", false, "RECIPIENT");
        public final static Property Content = new Property(2, String.class, "content", false, "CONTENT");
        public final static Property Date = new Property(3, java.util.Date.class, "date", false, "DATE");
        public final static Property ConversationId = new Property(4, String.class, "conversationId", false, "CONVERSATION_ID");
    }

    private Query<Message> conversation_MessagesQuery;

    public MessageDao(DaoConfig config) {
        super(config);
    }
    
    public MessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MESSAGE\" (" + //
                "\"SENDER\" TEXT," + // 0: sender
                "\"RECIPIENT\" TEXT," + // 1: recipient
                "\"CONTENT\" TEXT," + // 2: content
                "\"DATE\" INTEGER," + // 3: date
                "\"CONVERSATION_ID\" TEXT NOT NULL );"); // 4: conversationId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MESSAGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Message entity) {
        stmt.clearBindings();
 
        String sender = entity.getSender();
        if (sender != null) {
            stmt.bindString(1, sender);
        }
 
        String recipient = entity.getRecipient();
        if (recipient != null) {
            stmt.bindString(2, recipient);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(4, date.getTime());
        }
        stmt.bindString(5, entity.getConversationId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Message entity) {
        stmt.clearBindings();
 
        String sender = entity.getSender();
        if (sender != null) {
            stmt.bindString(1, sender);
        }
 
        String recipient = entity.getRecipient();
        if (recipient != null) {
            stmt.bindString(2, recipient);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(4, date.getTime());
        }
        stmt.bindString(5, entity.getConversationId());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Message readEntity(Cursor cursor, int offset) {
        Message entity = new Message( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // sender
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // recipient
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // content
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // date
            cursor.getString(offset + 4) // conversationId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Message entity, int offset) {
        entity.setSender(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setRecipient(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDate(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setConversationId(cursor.getString(offset + 4));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Message entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Message entity) {
        return null;
    }

    @Override
    public boolean hasKey(Message entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "messages" to-many relationship of Conversation. */
    public List<Message> _queryConversation_Messages(String conversationId) {
        synchronized (this) {
            if (conversation_MessagesQuery == null) {
                QueryBuilder<Message> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ConversationId.eq(null));
                conversation_MessagesQuery = queryBuilder.build();
            }
        }
        Query<Message> query = conversation_MessagesQuery.forCurrentThread();
        query.setParameter(0, conversationId);
        return query.list();
    }

}
